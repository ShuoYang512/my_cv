@misc{yang2023definition,
  title         = {Definition and Detection of Defects in NFT Smart Contracts},
  author        = {Shuo Yang and Jiachi Chen and Zibin Zheng},
  year          = {2023},
  eprint        = {2305.15829},
  archiveprefix = {arXiv},
  primaryclass  = {cs.SE}
}

@misc{lin2023understanding,
  title         = {Towards Understanding Crypto Money Laundering in Web3 Through the Lenses of Ethereum Heists},
  author        = {Dan Lin and Jiajing Wu and Qishuang Fu and Yunmei Yu and Kaixin Lin and Zibin Zheng and Shuo Yang},
  year          = {2023},
  eprint        = {2305.14748},
  archiveprefix = {arXiv},
  primaryclass  = {cs.CR}
}

@inproceedings{yang2022wali,
  author    = {Yang, Shuo
               and Li, Huizhong
               and Zheng, Zibin},
  editor    = {Svetinovic, Davor
               and Zhang, Yin
               and Luo, Xiapu
               and Huang, Xiaoyan
               and Chen, Xingping},
  title     = {WaLi: Control-Flow-Based Analysis of Wasm Smart Contracts},
  booktitle = {Blockchain and Trustworthy Systems},
  year      = {2022},
  publisher = {Springer Nature Singapore},
  address   = {Singapore},
  pages     = {322--335},
  abstract  = {With the proliferation of various types of blockchain applications, smart contracts are getting more and more essential in developing decentralized applications due to their powerful expressing capabilities. However, security vulnerabilities of smart contracts keep arising in recent years, which has attracted a lot of attention. Most of the related research mainly focuses on smart contracts deployed on Ethereum. But in the meantime, more and more types of smart contracts adopt Wasm as their bytecode format due to its smaller size and higher operating efficiency in blockchain. To avoid the recurrence of exploited vulnerabilities in Wasm smart contracts, we develop WaLi, a control-flow-based analyzer for security vulnerabilities. In particular, we first construct a control flow graph based on the Wasm bytecode and define a critical path identification method to locate possible paths that may contain vulnerabilities. Then we adopt a Wasm virtual machine to simulate a runtime environment when tracing the critical paths and report the result based on our vulnerability detection patterns. We choose Liquid smart contracts on FISCO-BCOS to illustrate our approach and the experimental results show that WaLi performs well in detecting the access control vulnerabilities.},
  isbn      = {978-981-19-8043-5}
}

